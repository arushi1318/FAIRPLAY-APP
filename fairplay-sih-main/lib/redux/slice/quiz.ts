import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import _ from 'lodash'

import { RootState } from '@/lib/redux/store'

interface Interface {
  questions: {
    question: string
    options: string[]
    correctAnswer: string
    userAnswer: null | boolean
  }[]
  score: number
}

const initialState: Interface = {
  questions: [
    {
      question:
        'What is the primary purpose of anti-doping regulations in sports?',
      options: [
        "To enhance athletes' performance",
        'To ensure fair competition',
        'To prevent injuries among athletes',
        'To increase the popularity of sports',
      ],
      correctAnswer: 'To ensure fair competition',
      userAnswer: null,
    },
    {
      question:
        'Which of the following substances is commonly banned in sports due to its performance-enhancing effects?',
      options: ['Aspirin', 'Insulin', 'Paracetamol', 'Vitamin C'],
      correctAnswer: 'Insulin',
      userAnswer: null,
    },
    {
      question:
        'What is the process of collecting and analyzing samples from athletes to detect the use of prohibited substances called?',
      options: [
        'Doping control',
        'Medical examination',
        'Performance testing',
        'Substance abuse screening',
      ],
      correctAnswer: 'Doping control',
      userAnswer: null,
    },
    {
      question:
        'If an athlete tests positive for a banned substance, what are the potential consequences?',
      options: [
        'Disqualification from competitions',
        'Suspension from their sport',
        'Loss of medals and awards',
        'All of the above',
      ],
      correctAnswer: 'All of the above',
      userAnswer: null,
    },
    {
      question:
        'What is the role of the World Anti-Doping Agency (WADA) in combating doping in sports?',
      options: [
        'Setting anti-doping standards',
        'Coordinating anti-doping efforts',
        'Investigating doping cases',
        'All of the above',
      ],
      correctAnswer: 'All of the above',
      userAnswer: null,
    },
  ],
  score: 0,
}

const quizSlice = createSlice({
  name: 'quiz',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    validateAnswer: (
      state,
      action: PayloadAction<{ question: string; answer: string }>,
    ) => {
      const question = _.find(state.questions, {
        question: action.payload.question,
      })
      if (!question) return

      if (question.correctAnswer === action.payload.answer) {
        state.score += 1
        question.userAnswer = true
      } else {
        question.userAnswer = false
      }
    },
  },
})

export const { validateAnswer } = quizSlice.actions
export const selectQuizQuestions = (store: RootState) => store.quiz.questions
export const selectQuizScore = (store: RootState) => store.quiz.score
export default quizSlice.reducer

/*
import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState, AppThunk } from '../../app/store'
import { fetchCount } from './counterAPI'

export interface CounterState {
  value: number
  status: 'idle' | 'loading' | 'failed'
}

const initialState: CounterState = {
  value: 0,
  status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount: number) => {
    const response = await fetchCount(amount)
    // The value we return becomes the `fulfilled` action payload
    return response.data
  },
)

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decrement: (state) => {
      state.value -= 1
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.value += action.payload
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed'
      })
  },
})

export const { increment, decrement, incrementByAmount } = counterSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state: RootState) => state.counter.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState())
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount))
    }
  }

export default counterSlice.reducer
*/
